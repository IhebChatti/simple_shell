.TH SIMPLE_SHELL "APR 11 2020" "simple_shell man page"
.SH NAME
.B simple_shell

.SH SYNOPSIS
 man [command] [arguments]
 EXAMPLE:
 man ls -l

.SH DESCRIPTION
 simple_shell is a simple UNIX program that interprets commands entered by the user.

.SH OVERVIEW
.user will put a command.
.user input will be tokenized (divided into small tokens), these tokens are seperated by delimeters.
.the first token which is token[0] will be considered as the command.
.the simple_shell will search for the PATH of this command (token[0]).
.if the $PATH is found the simple_shell will run that command.

.SH RETURN VALUE
 the simple_shell will return the value demanded from the program if the program managed to execute
 without problems, or the simple_shell will return an error depending on the type of error.

.SH COMPILATION
 files can be compiled using "gcc -g *.c -o hsh"

.B LIST OF FILES TO BE compiled
.built_ins.c
.find_path.c
.free_array.c
.get_env.c
.shell.c
.sig_handler.c
.string_ops.c
.string_ops2.c
.tokenizer.c

.SH SYNTAX
$ <command>
 or 
$ <commands> <filename>
 or
$ <command> "text"
 EXAMPLE 1:
$ ls
 EXAMPLE 2:
$ cd /home/simple_shell
 EXAMPLE 3:
$ echo "hello holberton"

.SH COMMANDS EXAMPLES
.SS ls : list all files in the current directory

.SS cd : change the current working directory

.SS exit : exit the shell program

.SS pwd : print the path of the current working directory

.SS printenv: prints out the name and values of the variables in the environement

.SS help : displays information about shell built-in commands

.SH HANDLING SHORTCUTS
.B Ctrl+D : terminates the simple_shell

.B Ctrl+C : prints ^Äˆ and gets the user back to a new line

.SH BUGS
 giving ls command an empty path is not handled.

.SH AUTHORS
 IHEB CHATTI, FOUED DADI